"use strict";var ApplicationConfiguration=function(){var applicationModuleName="meantest",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils","ngMaterial","highcharts-ng","btford.socket-io","ngJustGage","openlayers-directive","angularChart","duScroll","shoppinpal.mobile-menu"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$mdThemingProvider","$mdIconProvider",function($locationProvider,$mdThemingProvider,$mdIconProvider){$locationProvider.hashPrefix("!"),$mdThemingProvider.theme("default").primaryPalette("blue").accentPalette("red"),$mdIconProvider.defaultIconSet("./assets/svg/avatars.svg",128).icon("menu","./modules/core/img/icons/ic_menu_48px.svg",48).icon("temp","./modules/core/img/icons/temperature_icon_48px.svg",48).icon("share","./assets/svg/share.svg",24).icon("google_plus","./assets/svg/google_plus.svg",512).icon("hangouts","./assets/svg/hangouts.svg",512).icon("twitter","./assets/svg/twitter.svg",512).icon("phone","./assets/svg/phone.svg",512)}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("accessrules"),ApplicationConfiguration.registerModule("alerts"),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("clients"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("dashboard"),ApplicationConfiguration.registerModule("devices"),ApplicationConfiguration.registerModule("devicesensoralarmactions"),ApplicationConfiguration.registerModule("devicesensoralerts"),ApplicationConfiguration.registerModule("devicesensors"),ApplicationConfiguration.registerModule("notifications"),ApplicationConfiguration.registerModule("readings"),ApplicationConfiguration.registerModule("sensortypes"),ApplicationConfiguration.registerModule("softwareproductkeys"),ApplicationConfiguration.registerModule("softwareproducts"),ApplicationConfiguration.registerModule("softwareproductversions"),ApplicationConfiguration.registerModule("systemadministration"),ApplicationConfiguration.registerModule("useradministration"),ApplicationConfiguration.registerModule("userroles"),ApplicationConfiguration.registerModule("users"),ApplicationConfiguration.registerModule("vendors"),angular.module("accessrules").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Accessrules","accessrules","dropdown","/accessrules(/create)?"),Menus.addSubMenuItem("topbar","accessrules","List Accessrules","accessrules"),Menus.addSubMenuItem("topbar","accessrules","New Accessrule","accessrules/create")}]),angular.module("accessrules").config(["$stateProvider",function($stateProvider){$stateProvider.state("listAccessrules",{url:"/accessrules",templateUrl:"modules/accessrules/views/list-accessrules.client.view.html"}).state("createAccessrule",{url:"/accessrules/create",templateUrl:"modules/accessrules/views/create-accessrule.client.view.html"}).state("viewAccessrule",{url:"/accessrules/:accessruleId",templateUrl:"modules/accessrules/views/view-accessrule.client.view.html"}).state("editAccessrule",{url:"/accessrules/:accessruleId/edit",templateUrl:"modules/accessrules/views/edit-accessrule.client.view.html"})}]),angular.module("accessrules").controller("AccessrulesController",["$scope","$stateParams","$location","Authentication","Accessrules",function($scope,$stateParams,$location,Authentication,Accessrules){$scope.authentication=Authentication,$scope.create=function(){var accessrule=new Accessrules({name:this.name});accessrule.$save(function(response){$location.path("accessrules/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(accessrule){if(accessrule){accessrule.$remove();for(var i in $scope.accessrules)$scope.accessrules[i]===accessrule&&$scope.accessrules.splice(i,1)}else $scope.accessrule.$remove(function(){$location.path("accessrules")})},$scope.update=function(){var accessrule=$scope.accessrule;accessrule.$update(function(){$location.path("accessrules/"+accessrule._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.accessrules=Accessrules.query()},$scope.findOne=function(){$scope.accessrule=Accessrules.get({accessruleId:$stateParams.accessruleId})}}]),angular.module("accessrules").factory("Accessrules",["$resource",function($resource){return $resource("accessrules/:accessruleId",{accessruleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("alerts").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Alerts","alerts","dropdown","/alerts(/create)?"),Menus.addSubMenuItem("topbar","alerts","List Alerts","alerts"),Menus.addSubMenuItem("topbar","alerts","New Alert","alerts/create")}]),angular.module("alerts").config(["$stateProvider",function($stateProvider){$stateProvider.state("listAlerts",{url:"/alerts",templateUrl:"modules/alerts/views/list-alerts.client.view.html"}).state("createAlert",{url:"/alerts/create",templateUrl:"modules/alerts/views/create-alert.client.view.html"}).state("viewAlert",{url:"/alerts/:alertId",templateUrl:"modules/alerts/views/view-alert.client.view.html"}).state("editAlert",{url:"/alerts/:alertId/edit",templateUrl:"modules/alerts/views/edit-alert.client.view.html"})}]),angular.module("alerts").controller("AlertsController",["$scope","$stateParams","$location","Authentication","Alerts",function($scope,$stateParams,$location,Authentication,Alerts){$scope.authentication=Authentication,$scope.create=function(){var alert=new Alerts({name:this.name});alert.$save(function(response){$location.path("alerts/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(alert){if(alert){alert.$remove();for(var i in $scope.alerts)$scope.alerts[i]===alert&&$scope.alerts.splice(i,1)}else $scope.alert.$remove(function(){$location.path("alerts")})},$scope.update=function(){var alert=$scope.alert;alert.$update(function(){$location.path("alerts/"+alert._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.alerts=Alerts.query()},$scope.findOne=function(){$scope.alert=Alerts.get({alertId:$stateParams.alertId})}}]),angular.module("alerts").factory("Alerts",["$resource",function($resource){return $resource("alerts/:alertId",{alertId:"@_id"},{update:{method:"PUT"}})}]),angular.module("alerts").factory("MyAlerts",["$resource",function($resource){return $resource("myalerts/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]),angular.module("alerts").factory("UnresolvedAlerts",["$resource",function($resource){return $resource("unresolvedalerts/:alerttype",{userId:"@_id"},{update:{method:"PUT"}})}]),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Articles","articles","dropdown","/articles(/create)?"),Menus.addSubMenuItem("topbar","articles","List Articles","articles"),Menus.addSubMenuItem("topbar","articles","New Article","articles/create")}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html",data:{displayName:"Create Article"}}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles","$mdToast","$animate","$mdDialog","Socket",function($scope,$stateParams,$location,Authentication,Articles,$mdToast,$animate,$mdDialog,Socket){$scope.authentication=Authentication,$scope.toastPosition={bottom:!0,top:!1,left:!0,right:!1},$scope.getToastPosition=function(){return Object.keys($scope.toastPosition).filter(function(pos){return $scope.toastPosition[pos]}).join(" ")},$scope.sendMail=function(){$mdToast.show($mdToast.simple().content("Thanks for your Message  You Rock!").position($scope.getToastPosition()).hideDelay(3e3))},Socket.on("article.created",function(article){$mdToast.show($mdToast.simple().content("Article created"+article).position($scope.getToastPosition()).hideDelay(3e3))}),Socket.on("reading.received",function(reading){$mdToast.show($mdToast.simple().content("reading received "+reading.toString()).position($scope.getToastPosition()).hideDelay(3e3))}),$scope.showAlert=function(ev){$mdDialog.show($mdDialog.alert().title("This is an alert title").content("You can specify some description text in here.").ariaLabel("Alert Dialog Demo").ok("Got it!").targetEvent(ev))},$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("clients").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Clients","clients","dropdown","/clients(/create)?"),Menus.addSubMenuItem("topbar","clients","List Clients","clients"),Menus.addSubMenuItem("topbar","clients","New Client","clients/create")}]),angular.module("clients").config(["$stateProvider",function($stateProvider){$stateProvider.state("listClients",{url:"/clients",templateUrl:"modules/clients/views/list-clients.client.view.html",data:{displayName:"Clients"}}).state("listMyClients",{url:"/myclients",templateUrl:"modules/clients/views/list-myclients.client.view.html",data:{displayName:"My Clients"}}).state("createClient",{url:"/clients/create",templateUrl:"modules/clients/views/create-client.client.view.html"}).state("viewClient",{url:"/clients/:clientId",templateUrl:"modules/clients/views/view-client.client.view.html"}).state("editClient",{url:"/clients/:clientId/edit",templateUrl:"modules/clients/views/edit-client.client.view.html"})}]),angular.module("clients").controller("ClientsController",["$scope","$stateParams","$location","Authentication","Clients","$mdToast","$animate","$mdDialog","Devices","$modal","$log","ClientsUsers",function($scope,$stateParams,$location,Authentication,Clients,$mdToast,$animate,$mdDialog,Devices,$modal,$log,ClientsUsers){function updateData(){setInterval(function(){var x=(new Date).getTime(),y=Math.random();globalSeries.addPoint([x,y],!0,!0)},1e3)}$scope.authentication=Authentication,$scope.section="Clients",$scope.clientsDevices="",$scope.clientsUsers="",$scope.toastPosition={bottom:!0,top:!1,left:!0,right:!1},$scope.items=["item1","item2","item3"],$scope.animationsEnabled=!0,$scope.open=function(size){$modal.open({animation:$scope.animationsEnabled,templateUrl:"modules/clients/views/edit-client.client.view.html",controller:"ClientsController",size:size,resolve:{items:function(){return $scope.items}}})},$scope.getToastPosition=function(){return Object.keys($scope.toastPosition).filter(function(pos){return $scope.toastPosition[pos]}).join(" ")},$scope.create=function(){var client=new Clients({name:this.name});client.$save(function(response){$location.path("clients/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(client){if(client){client.$remove();for(var i in $scope.clients)$scope.clients[i]===client&&$scope.clients.splice(i,1)}else $scope.client.$remove(function(){$location.path("clients")})},$scope.update=function(){var client=$scope.client;client.$update(function(){$location.path("clients/"+client._id)},function(errorResponse){$scope.error=errorResponse.data.message,$mdToast.show($mdToast.simple().content("Updated Record Successfully").position($scope.getToastPosition()).hideDelay(3e3)),$log.info($scope.error)})},$scope.find=function(){$scope.clients=Clients.query()},$scope.findOne=function(){$scope.client=Clients.get({clientId:$stateParams.clientId}),$scope.clientsUsers=ClientsUsers.query({clientId1:$stateParams.clientId})};var globalSeries;$scope.chartConfig={chart:{type:"spline",marginRight:10,events:{load:function(){var series=this.series[0];globalSeries=series,updateData()}}},title:{text:"Readings Cold Room 1"},xAxis:{type:"datetime",tickPixelInterval:150},yAxis:{title:{text:"Value"},plotLines:[{value:0,width:1,color:"#808080"}]},legend:{enabled:!1},exporting:{enabled:!1},series:[{name:"Random data",data:function(){var i,data=[],time=(new Date).getTime();for(i=-19;0>=i;i+=1)data.push({x:time+1e3*i,y:Math.random()});return data}()}]}}]),angular.module("clients").controller("MyClientsController",["$scope","$stateParams","$location","Authentication","MyClients","$mdToast","$animate","$mdDialog","Devices","$modal","$log","ClientsUsers",function($scope,$stateParams,$location,Authentication,MyClients,$mdToast,$animate,$mdDialog,Devices,$modal,$log,ClientsUsers){function updateData(){setInterval(function(){var x=(new Date).getTime(),y=Math.random();globalSeries.addPoint([x,y],!0,!0)},1e3)}$scope.authentication=Authentication,$scope.section="Clients",$scope.clientsDevices="",$scope.clientsUsers="",$scope.toastPosition={bottom:!0,top:!1,left:!0,right:!1},$scope.items=["item1","item2","item3"],$scope.animationsEnabled=!0,$scope.open=function(size){$modal.open({animation:$scope.animationsEnabled,templateUrl:"modules/clients/views/edit-client.client.view.html",controller:"MyClientsController",size:size,resolve:{items:function(){return $scope.items}}})},$scope.getToastPosition=function(){return Object.keys($scope.toastPosition).filter(function(pos){return $scope.toastPosition[pos]}).join(" ")},$scope.create=function(){var client=new Clients({name:this.name});client.$save(function(response){$location.path("clients/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(client){if(client){client.$remove();for(var i in $scope.clients)$scope.clients[i]===client&&$scope.clients.splice(i,1)}else $scope.client.$remove(function(){$location.path("clients")})},$scope.update=function(){var client=$scope.client;client.$update(function(){$location.path("clients/"+client._id)},function(errorResponse){$scope.error=errorResponse.data.message,$mdToast.show($mdToast.simple().content("Updated Record Successfully").position($scope.getToastPosition()).hideDelay(3e3)),$log.info($scope.error)})},$scope.find=function(){$scope.clients=MyClients.query()},$scope.findOne=function(){$scope.client=MyClients.get({clientId:$stateParams.clientId}),$scope.clientsUsers=ClientsUsers.query({clientId1:$stateParams.clientId})};var globalSeries;$scope.chartConfig={chart:{type:"spline",marginRight:10,events:{load:function(){var series=this.series[0];globalSeries=series,updateData()}}},title:{text:"Readings Cold Room 1"},xAxis:{type:"datetime",tickPixelInterval:150},yAxis:{title:{text:"Value"},plotLines:[{value:0,width:1,color:"#808080"}]},legend:{enabled:!1},exporting:{enabled:!1},series:[{name:"Random data",data:function(){var i,data=[],time=(new Date).getTime();for(i=-19;0>=i;i+=1)data.push({x:time+1e3*i,y:Math.random()});return data}()}]}}]),angular.module("clients").factory("Clients",["$resource",function($resource){return $resource("clients/:clientId",{clientId:"@_id"},{update:{method:"PUT"}})}]),angular.module("clients").factory("MyClients",["$resource",function($resource){return $resource("myclients/:clientId",{clientId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html",data:{displayName:"Home"}})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus","$mdSidenav","$mdUtil","$log","$location","MyAlerts","UnresolvedAlerts",function($scope,Authentication,Menus,$mdSidenav,$mdUtil,$log,$location,MyAlerts,UnresolvedAlerts){function buildToggler(navID){var debounceFn=$mdUtil.debounce(function(){$mdSidenav(navID).toggle().then(function(){$log.debug("toggle "+navID+" is done")})},300);return debounceFn}$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.showOverlay=!0,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1});document.getElementById("side-menu");$("#side-menu").metisMenu(),$scope.myAlerts="",$scope.myAlerts=MyAlerts.query({userId:Authentication.user._id}),$scope.unresovedSystemAlerts=UnresolvedAlerts.query({alerttype:"system"}),$scope.unresovedLicenceAlerts=UnresolvedAlerts.query({alerttype:"license"}),$scope.toggleLeft=buildToggler("left"),$scope.toggleRight=buildToggler("right"),$scope.close=function(){$mdSidenav("left").close().then(function(){$log.debug("close LEFT is done")})},$scope.closeRight=function(){$mdSidenav("right").close().then(function(){$log.debug("close RIGHT is done")})}}]);var coremodule=angular.module("core");coremodule.controller("HomeController",["$scope","Authentication","$document",function($scope,Authentication,$document){$scope.authentication=Authentication,angular.element(document.querySelector(".navbar-nav")).addClass("green-fg")}]);var coremodule=angular.module("core");coremodule.directive("restrict",["Authentication",function(Authentication){return{restrict:"A",priority:1e5,scope:!1,link:function(){},compile:function(element,attr,linker){var accessDenied=!0,user=Authentication.user,attributes=attr.access.split(" ");for(var i in attributes)user.roles&&user.roles.indexOf(attributes[i])>-1&&(accessDenied=!1);accessDenied&&user&&(element.children().remove(),element.remove(),console.log("Removed Element"))}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").factory("Socket",["socketFactory",function(socketFactory){return socketFactory()}]),angular.module("dashboard").config(["$stateProvider",function($stateProvider){$stateProvider.state("dashboard",{url:"/dashboard",templateUrl:"modules/dashboard/views/dashboard.client.view.html"})}]),angular.module("dashboard").controller("DashboardController",["$scope","$mdToast","$animate","$mdDialog","$interval","Devices","MyDevices","Authentication",function($scope,$mdToast,$animate,$mdDialog,$interval,Devices,MyDevices,Authentication){$scope.authentication=Authentication;var usersClient=$scope.authentication.user.client;usersClient?$scope.devices=MyDevices.query():$scope.devices=Devices.query(),$scope.selectedDevice="",$scope.toastPosition={bottom:!0,top:!1,left:!0,right:!1},$scope.getToastPosition=function(){return Object.keys($scope.toastPosition).filter(function(pos){return $scope.toastPosition[pos]}).join(" ")};var globalSeries,socket=io("https://40.124.8.98");socket.on("connect",function(){console.log("connected")});var currentDeviceId="";$scope.sensor1="",$scope.sensor2="",$scope.sensor3="",$scope.sensor4="",$scope.selectedDevice&&(currentDeviceId=$scope.selectedDevice.deviceId),$scope.$watch("selectedDevice",function(){$scope.chartConfig.series[0].data=[],$scope.chartConfig.series[1].data=[]}),socket.on("pushdata",function(data){$scope.selectedDevice&&data.device==$scope.selectedDevice.deviceId&&$scope.$apply(function(){$scope.sensor1=data.sensor1,$scope.sensor2=data.sensor2,$scope.sensor3=data.sensor3,$scope.sensor4=data.sensor4;var x=(new Date).getTime(),y=data.sensor1,y2=data.sensor2;$scope.chartConfig.series[0].data&&($scope.chartConfig.series[0].data.length>15&&$scope.chartConfig.series[0].data.shift(),$scope.chartConfig.series[0].data.push([x,parseFloat(y)])),$scope.chartConfig.series[1].data&&($scope.chartConfig.series[1].data.length>15&&$scope.chartConfig.series[1].data.shift(),$scope.chartConfig.series[1].data.push([x,parseFloat(y2)])),$scope.chartConfig.series[2].data&&($scope.chartConfig.series[2].data.length>15&&$scope.chartConfig.series[2].data.shift(),$scope.chartConfig.series[2].data.push([x,parseFloat(data.sensor3)])),$scope.chartConfig.series[3].data&&($scope.chartConfig.series[3].data.length>15&&$scope.chartConfig.series[3].data.shift(),$scope.chartConfig.series[3].data.push([x,parseFloat(data.sensor4)]))})}),socket.on("disconnect",function(){console.log("Connection is lost")}),$scope.colours=[{name:"Red",hex:"#F21B1B"},{name:"Blue",hex:"#1B66F2"},{name:"Green",hex:"#07BA16"}],$scope.colour="",$scope.center={lat:-17.82922,lon:31.053961000000072,zoom:8},$scope.defaults={layer:{url:"http://{s}.tile.opencyclemap.org/cycle/{z}/{x}/{y}.png"},map:{scrollWheelZoom:!0},controls:{zoom:{position:"topright"}}},$scope.chartConfig={chart:{type:"spline",marginRight:10,events:{load:function(){var series=this.series[0];globalSeries=series,this.updateData()}}},title:{text:"Readings"},xAxis:{type:"datetime",tickPixelInterval:150},yAxis:{title:{text:"Temperature"},plotLines:[{value:0,width:1,color:"#808080"}],max:100},pointInterval:6e4,legend:{enabled:!1},exporting:{enabled:!1},series:[{name:"Sensor 1",data:function(){var data=[];(new Date).getTime();return data}(),color:"#808080"},{name:"Sensor 2",data:function(){var data=[];(new Date).getTime();return data}(),color:"#ff0000"},{name:"Sensor 3",data:function(){var data=[];(new Date).getTime();return data}(),color:"#0000ff"},{name:"Sensor 4",data:function(){var data=[];(new Date).getTime();return data}(),color:"#00ff00"}]},$scope.myval=0,$scope.options={data:function(){var i,data=[],time=(new Date).getTime();for(i=-19;0>=i;i+=1)data.push({sales:time+1e3*i,income:Math.random()});return data}(),dimensions:{sales:{type:"line"},income:{axis:"x"}}},$scope.pushpoint=function(){$scope.options.data.shift(),$scope.options.data.push({sales:(new Date).getTime(),income:Math.random()})},$scope.update=function(){$scope.chartConfig.title=$scope.selectedDevice.name},$scope.showSummary=function(selection){$scope.selectedSummary=selection}}]),angular.module("devices").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Devices","devices","dropdown","/devices(/create)?"),Menus.addSubMenuItem("topbar","devices","List Devices","devices"),Menus.addSubMenuItem("topbar","devices","New Device","devices/create")}]),angular.module("devices").config(["$stateProvider",function($stateProvider){$stateProvider.state("listDevices",{url:"/devices",templateUrl:"modules/devices/views/list-devices.client.view.html"}).state("createDevice",{url:"/devices/create",templateUrl:"modules/devices/views/create-device.client.view.html"}).state("viewDevice",{url:"/devices/:deviceId",templateUrl:"modules/devices/views/view-device.client.view.html"}).state("editDevice",{url:"/devices/:deviceId/edit",templateUrl:"modules/devices/views/edit-device.client.view.html"}).state("listMyDevices",{url:"/mydevices",templateUrl:"modules/devices/views/list-mydevices.client.view.html"}).state("editMyDevice",{url:"/mydevices/:deviceId/edit",templateUrl:"modules/devices/views/edit-mydevice.client.view.html"})}]),angular.module("devices").controller("DevicesController",["$scope","$stateParams","$location","Authentication","Devices","$rootScope","$mdToast","Devicesensors","Sensortypes","$filter","Devicesensoralerts","$modal","Readings2","DeviceSensor",function($scope,$stateParams,$location,Authentication,Devices,$rootScope,$mdToast,Devicesensors,Sensortypes,$filter,Devicesensoralerts,$modal,Readings2,DeviceSensor){$scope.authentication=Authentication,$rootScope.section="Devices",$scope.selectedView="",$scope.selectedAlertView="",$scope.currentSelectedSensorAlert="",$scope.selectedAlertActionView="",$scope.currentSelectedSensorAlertAction="",$scope.devicesReadings="",$scope.toastPosition={bottom:!0,top:!1,left:!0,right:!1},$scope.getToastPosition=function(){return Object.keys($scope.toastPosition).filter(function(pos){return $scope.toastPosition[pos]}).join(" ")},$scope.currentSelectedSensor="",$scope.availableSensortypes="",$scope.showView=function(selection,sensor){$scope.selectedView=selection,$scope.currentSelectedSensor=sensor,("edit"===selection||"create"===selection)&&($scope.availableSensortypes=Sensortypes.query())},$scope.showAlertView=function(selection,sensorAlert){$scope.selectedAlertView=selection,sensorAlert&&($scope.currentSelectedSensorAlert=sensorAlert,sensorAlert.alarmactions&&($scope.currentSelectedSensorAlertsActions=sensorAlert.alarmactions))},$scope.showAlertActionView=function(selection,sensorAlertAction){$scope.selectedAlertActionView=selection,sensorAlertAction&&($scope.currentSelectedSensorAlertAction=sensorAlertAction)},$scope.create=function(){var device=new Devices({deviceId:this.deviceId,location:this.location,name:this.name,description:this.description});device.sensors?device.sensors.push({name:"An Embedded Sensor Document",sensoralerts:[]}):(device.sensors=[],device.sensors.push({name:"An Embedded Sensor Document",sensoralerts:[]})),device.$save(function(response){$location.path("devices/"+response._id),$scope.location="",$scope.deviceId="",$mdToast.show($mdToast.simple().content("Record Created").position($scope.getToastPosition()).hideDelay(3e3))},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(device){if(device){device.$remove();for(var i in $scope.devices)$scope.devices[i]===device&&$scope.devices.splice(i,1)}else $scope.device.$remove(function(){$location.path("devices")})},$scope.update=function(){var device=$scope.device;device.$update(function(){$mdToast.show($mdToast.simple().content("Device Record Updated").position($scope.getToastPosition()).theme("success-toast").hideDelay(3e3))},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.devices=Devices.query()},$scope.deviceSensorAlerts="",$scope.findOne=function(){$scope.device=Devices.get({deviceId:$stateParams.deviceId}),$scope.devicesReadings=Readings2.query({myId:$stateParams.deviceId})},$scope.animationsEnabled=!0,$scope.openCreateSensorAlert=function(size,selectedAlert){$modal.open({animation:$scope.animationsEnabled,templateUrl:"modules/devicesensoralerts/views/create-devicesensoralert.client.view.html",controller:["$modalInstnce","$scope","alert",function($modalInstnce,$scope,alert){$scope.devicesensoralert=alert}],size:size,resolve:{alert:function(){return selectedAlert}}})},$scope.openEditSensorAlert=function(size,selectedAlert){$modal.open({animation:$scope.animationsEnabled,templateUrl:"modules/devicesensoralerts/views/edit-devicesensoralert.client.view.html",controller:["$modalInstance","$scope","alert",function($modalInstance,$scope,alert){$scope.devicesensoralert=alert,$scope.ok=function(){$modalInstance.close(alert)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{alert:function(){return selectedAlert}}})},$scope.openEditDevice=function(size,selectedDevice){$modal.open({animation:$scope.animationsEnabled,templateUrl:"modules/devices/views/edit-device.client.view.html",controller:["$modalInstance","$scope","deviceOnEdit",function($modalInstance,$scope,deviceOnEdit){$scope.device=deviceOnEdit;var resultP=Devicesensors.query();$scope.device._id;$scope.connectedSensors=resultP;var resForDeviceSensorAlerts=Devicesensoralerts.query();$scope.deviceSensorAlerts=resForDeviceSensorAlerts,$scope.ok=function(){$modalInstance.close(deviceOnEdit)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],windowClass:"app-modal-window",size:size,resolve:{deviceOnEdit:function(){return selectedDevice}}})},this.updateDevice=function(){var device=$scope.device;console.log(" Device Details are "+device.location.lon),$scope.device.$update(function(){$mdToast.show($mdToast.simple().content("Device Record Updated").position($scope.getToastPosition()).theme("success-toast").hideDelay(3e3)),$location.path("devices/"+device._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createsensor=function(){$scope.device.sensors||($scope.device.sensors=[]),$scope.device.sensors.push({
name:this.sensorname_c,sensortype:this.sensortype_c,channel:this.channel_c}),$scope.device.$update(function(err){err&&console.log("error updating record"),$mdToast.show($mdToast.simple().content("Sensor Record Created").position($scope.getToastPosition()).hideDelay(3e3))})},$scope.connectedSensorTabSelected=function(){alert("Youve selected connected sensors")},$scope.removeSensor=function(devicesensor){$scope.device.sensors.splice($scope.device.sensors.indexOf(devicesensor),1),$scope.device.$update(function(){$mdToast.show($mdToast.simple().content("Device Record Updated").position($scope.getToastPosition()).theme("success-toast").hideDelay(3e3)),$scope.device.sensors&&($scope.currentSelectedSensor=$scope.device.sensors[0],$scope.showView("edit",$scope.currentSelectedSensor))},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createSensorAlert=function(){var newDeviceSensorAlert={name:this.alertname_c};console.log("Alert Details"+newDeviceSensorAlert),newDeviceSensorAlert.alarmactions=[],$scope.showAlertView("editAlert",newDeviceSensorAlert),$scope.currentSelectedSensor.sensoralerts?$scope.currentSelectedSensor.sensoralerts.push(newDeviceSensorAlert):($scope.currentSelectedSensor.sensoralerts=[],$scope.currentSelectedSensor.sensoralerts.push(newDeviceSensorAlert)),$scope.device.$update(function(){$mdToast.show($mdToast.simple().content("Device Record Updated").position($scope.getToastPosition()).theme("success-toast").hideDelay(3e3))})},$scope.removeSensorAlert=function(alert){console.log(alert),console.log($scope.currentSelectedSensor.sensoralerts),$scope.currentSelectedSensor.sensoralerts.id(alert._id).remove(),$scope.device.save(function(err){})},$scope.createAlertAction=function(){var newAlertAction={name:this.alertaction_name_c,actiontype:this.alertaction_actiontype_c,thresholdvaluemin:this.alertaction_thresholdvaluemin_c,thresholdvaluemax:this.alertaction_thresholdvaluemax_c,sendonclear:this.alertaction_sendonclear_c};$scope.currentSelectedSensorAlert.alertactions?$scope.currentSelectedSensorAlert.alertactions.push(newAlertAction):($scope.currentSelectedSensorAlert.alertactions=[],$scope.currentSelectedSensorAlert.alertactions.push(newAlertAction)),$scope.device.$update(function(){$mdToast.show($mdToast.simple().content("Device Record Updated").position($scope.getToastPosition()).theme("success-toast").hideDelay(3e3))})},$scope.updateDeviceSensor=function(){var deviceSensor=$scope.currentSelectedSensor;deviceSensor.$update(function(){$mdToast.show($mdToast.simple().content("Device Sensor Record Updated").position($scope.getToastPosition()).theme("success-toast").hideDelay(3e3))},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.updateRecord=function(){$scope.device.$update(function(){$mdToast.show($mdToast.simple().content("Record Updated").position($scope.getToastPosition()).theme("success-toast").hideDelay(3e3))},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.connectedSensorsTabSelected=function(){$scope.device.sensors&&($scope.currentSelectedSensor=$scope.device.sensors[0],$scope.showView("edit",$scope.currentSelectedSensor))},$scope.sensorsAlertsTabSelected=function(){$scope.currentSelectedSensor.sensoralerts&&($scope.currentSelectedSensorAlert=$scope.currentSelectedSensor.sensoralerts[0],$scope.showAlertView("editAlert",$scope.currentSelectedSensorAlert))}}]),angular.module("devices").controller("MyDevicesController",["$scope","$stateParams","$location","Authentication","MyDevices","$rootScope","$mdToast","Devicesensors","Sensortypes","$filter","Devicesensoralerts","$modal","Readings2","DeviceSensor",function($scope,$stateParams,$location,Authentication,MyDevices,$rootScope,$mdToast,Devicesensors,Sensortypes,$filter,Devicesensoralerts,$modal,Readings2,DeviceSensor){$scope.authentication=Authentication,$rootScope.section="Devices",$scope.selectedView="",$scope.selectedAlertView="",$scope.currentSelectedSensorAlert="",$scope.selectedAlertActionView="",$scope.currentSelectedSensorAlertAction="",$scope.devicesReadings="",$scope.toastPosition={bottom:!0,top:!1,left:!0,right:!1},$scope.getToastPosition=function(){return Object.keys($scope.toastPosition).filter(function(pos){return $scope.toastPosition[pos]}).join(" ")},$scope.currentSelectedSensor="",$scope.availableSensortypes="",$scope.showView=function(selection,sensor){$scope.selectedView=selection,$scope.currentSelectedSensor=sensor,("edit"===selection||"create"===selection)&&($scope.availableSensortypes=Sensortypes.query())},$scope.showAlertView=function(selection,sensorAlert){$scope.selectedAlertView=selection,sensorAlert&&($scope.currentSelectedSensorAlert=sensorAlert,sensorAlert.alarmactions&&($scope.currentSelectedSensorAlertsActions=sensorAlert.alarmactions))},$scope.showAlertActionView=function(selection,sensorAlertAction){$scope.selectedAlertActionView=selection,sensorAlertAction&&($scope.currentSelectedSensorAlertAction=sensorAlertAction)},$scope.create=function(){var device=new MyDevices({deviceId:this.deviceId,location:this.location,name:this.name,description:this.description});device.sensors?device.sensors.push({name:"An Embedded Sensor Document",sensoralerts:[]}):(device.sensors=[],device.sensors.push({name:"An Embedded Sensor Document",sensoralerts:[]})),device.$save(function(response){$location.path("devices/"+response._id),$scope.location="",$scope.deviceId="",$mdToast.show($mdToast.simple().content("Record Created").position($scope.getToastPosition()).hideDelay(3e3))},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(device){if(device){device.$remove();for(var i in $scope.devices)$scope.devices[i]===device&&$scope.devices.splice(i,1)}else $scope.device.$remove(function(){$location.path("devices")})},$scope.update=function(){var device=$scope.device;device.$update(function(){$mdToast.show($mdToast.simple().content("Device Record Updated").position($scope.getToastPosition()).theme("success-toast").hideDelay(3e3))},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.devices=MyDevices.query()},$scope.deviceSensorAlerts="",$scope.findOne=function(){$scope.device=MyDevices.get({deviceId:$stateParams.deviceId}),$scope.devicesReadings=Readings2.query({myId:$stateParams.deviceId})},$scope.animationsEnabled=!0,$scope.openCreateSensorAlert=function(size,selectedAlert){$modal.open({animation:$scope.animationsEnabled,templateUrl:"modules/devicesensoralerts/views/create-devicesensoralert.client.view.html",controller:["$modalInstnce","$scope","alert",function($modalInstnce,$scope,alert){$scope.devicesensoralert=alert}],size:size,resolve:{alert:function(){return selectedAlert}}})},$scope.openEditSensorAlert=function(size,selectedAlert){$modal.open({animation:$scope.animationsEnabled,templateUrl:"modules/devicesensoralerts/views/edit-devicesensoralert.client.view.html",controller:["$modalInstance","$scope","alert",function($modalInstance,$scope,alert){$scope.devicesensoralert=alert,$scope.ok=function(){$modalInstance.close(alert)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{alert:function(){return selectedAlert}}})},$scope.openEditDevice=function(size,selectedDevice){$modal.open({animation:$scope.animationsEnabled,templateUrl:"modules/devices/views/edit-device.client.view.html",controller:["$modalInstance","$scope","deviceOnEdit",function($modalInstance,$scope,deviceOnEdit){$scope.device=deviceOnEdit;var resultP=Devicesensors.query();$scope.device._id;$scope.connectedSensors=resultP;var resForDeviceSensorAlerts=Devicesensoralerts.query();$scope.deviceSensorAlerts=resForDeviceSensorAlerts,$scope.ok=function(){$modalInstance.close(deviceOnEdit)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],windowClass:"app-modal-window",size:size,resolve:{deviceOnEdit:function(){return selectedDevice}}})},this.updateDevice=function(){var device=$scope.device;console.log(" Device Details are "+device.location.lon),$scope.device.$update(function(){$mdToast.show($mdToast.simple().content("Device Record Updated").position($scope.getToastPosition()).theme("success-toast").hideDelay(3e3)),$location.path("devices/"+device._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createsensor=function(){$scope.device.sensors||($scope.device.sensors=[]),$scope.device.sensors.push({name:this.sensorname_c,sensortype:this.sensortype_c,channel:this.channel_c}),$scope.device.$update(function(err){err&&console.log("error updating record"),$mdToast.show($mdToast.simple().content("Sensor Record Created").position($scope.getToastPosition()).hideDelay(3e3))})},$scope.connectedSensorTabSelected=function(){alert("Youve selected connected sensors")},$scope.removeSensor=function(devicesensor){$scope.device.sensors.splice($scope.device.sensors.indexOf(devicesensor),1),$scope.device.$update(function(){$mdToast.show($mdToast.simple().content("Device Record Updated").position($scope.getToastPosition()).theme("success-toast").hideDelay(3e3)),$scope.device.sensors&&($scope.currentSelectedSensor=$scope.device.sensors[0],$scope.showView("edit",$scope.currentSelectedSensor))},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createSensorAlert=function(){var newDeviceSensorAlert={name:this.alertname_c};console.log("Alert Details"+newDeviceSensorAlert),newDeviceSensorAlert.alarmactions=[],$scope.showAlertView("editAlert",newDeviceSensorAlert),$scope.currentSelectedSensor.sensoralerts?$scope.currentSelectedSensor.sensoralerts.push(newDeviceSensorAlert):($scope.currentSelectedSensor.sensoralerts=[],$scope.currentSelectedSensor.sensoralerts.push(newDeviceSensorAlert)),$scope.device.$update(function(){$mdToast.show($mdToast.simple().content("Device Record Updated").position($scope.getToastPosition()).theme("success-toast").hideDelay(3e3))})},$scope.removeSensorAlert=function(alert){console.log(alert),console.log($scope.currentSelectedSensor.sensoralerts),$scope.currentSelectedSensor.sensoralerts.id(alert._id).remove(),$scope.device.save(function(err){})},$scope.createAlertAction=function(){var newAlertAction={name:this.alertaction_name_c,actiontype:this.alertaction_actiontype_c,thresholdvaluemin:this.alertaction_thresholdvaluemin_c,thresholdvaluemax:this.alertaction_thresholdvaluemax_c,sendonclear:this.alertaction_sendonclear_c};$scope.currentSelectedSensorAlert.alertactions?$scope.currentSelectedSensorAlert.alertactions.push(newAlertAction):($scope.currentSelectedSensorAlert.alertactions=[],$scope.currentSelectedSensorAlert.alertactions.push(newAlertAction)),$scope.device.$update(function(){$mdToast.show($mdToast.simple().content("Device Record Updated").position($scope.getToastPosition()).theme("success-toast").hideDelay(3e3))})},$scope.updateDeviceSensor=function(){var deviceSensor=$scope.currentSelectedSensor;deviceSensor.$update(function(){$mdToast.show($mdToast.simple().content("Device Sensor Record Updated").position($scope.getToastPosition()).theme("success-toast").hideDelay(3e3))},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.updateRecord=function(){$scope.device.$update(function(){$mdToast.show($mdToast.simple().content("Record Updated").position($scope.getToastPosition()).theme("success-toast").hideDelay(3e3))},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.connectedSensorsTabSelected=function(){$scope.device.sensors&&($scope.currentSelectedSensor=$scope.device.sensors[0],$scope.showView("edit",$scope.currentSelectedSensor))},$scope.sensorsAlertsTabSelected=function(){$scope.currentSelectedSensor.sensoralerts&&($scope.currentSelectedSensorAlert=$scope.currentSelectedSensor.sensoralerts[0],$scope.showAlertView("editAlert",$scope.currentSelectedSensorAlert))}}]),angular.module("devices").filter("devicesensorsfilter",[function(){return function(input){return input.deviceId.match(/^Ma/)?!0:!1}}]),angular.module("devices").filter("mydevicesfilter",[function(){return function(input){return input.deviceId.match(/^Ma/)?!0:!1}}]),angular.module("devices").factory("Devices",["$resource",function($resource){return $resource("devices/:deviceId",{deviceId:"@_id"},{update:{method:"PUT"}})}]),angular.module("devices").factory("DeviceSensor",["$resource",function($resource){return $resource("devicesensor/:sensId",{sensId:"@_id"},{update:{method:"PUT"}})}]),angular.module("devices").factory("MyDevices",["$resource",function($resource){return $resource("mydevices/:deviceId",{deviceId:"@_id"},{update:{method:"PUT"}})}]),angular.module("devicesensoralarmactions").config(["$stateProvider",function($stateProvider){$stateProvider.state("listDevicesensoralarmactions",{url:"/devicesensoralarmactions",templateUrl:"modules/devicesensoralarmactions/views/list-devicesensoralarmactions.client.view.html"}).state("createDevicesensoralarmaction",{url:"/devicesensoralarmactions/create",templateUrl:"modules/devicesensoralarmactions/views/create-devicesensoralarmaction.client.view.html"}).state("viewDevicesensoralarmaction",{url:"/devicesensoralarmactions/:devicesensoralarmactionId",templateUrl:"modules/devicesensoralarmactions/views/view-devicesensoralarmaction.client.view.html"}).state("editDevicesensoralarmaction",{url:"/devicesensoralarmactions/:devicesensoralarmactionId/edit",templateUrl:"modules/devicesensoralarmactions/views/edit-devicesensoralarmaction.client.view.html"})}]),angular.module("devicesensoralarmactions").controller("DevicesensoralarmactionsController",["$scope","$stateParams","$location","Authentication","Devicesensoralarmactions",function($scope,$stateParams,$location,Authentication,Devicesensoralarmactions){$scope.authentication=Authentication,$scope.create=function(){var devicesensoralarmaction=new Devicesensoralarmactions({name:this.name});devicesensoralarmaction.$save(function(response){$location.path("devicesensoralarmactions/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(devicesensoralarmaction){if(devicesensoralarmaction){devicesensoralarmaction.$remove();for(var i in $scope.devicesensoralarmactions)$scope.devicesensoralarmactions[i]===devicesensoralarmaction&&$scope.devicesensoralarmactions.splice(i,1)}else $scope.devicesensoralarmaction.$remove(function(){$location.path("devicesensoralarmactions")})},$scope.update=function(){var devicesensoralarmaction=$scope.devicesensoralarmaction;devicesensoralarmaction.$update(function(){$location.path("devicesensoralarmactions/"+devicesensoralarmaction._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.devicesensoralarmactions=Devicesensoralarmactions.query()},$scope.findOne=function(){$scope.devicesensoralarmaction=Devicesensoralarmactions.get({devicesensoralarmactionId:$stateParams.devicesensoralarmactionId})}}]),angular.module("devicesensoralarmactions").factory("Devicesensoralarmactions",["$resource",function($resource){return $resource("devicesensoralarmactions/:devicesensoralarmactionId",{devicesensoralarmactionId:"@_id"},{update:{method:"PUT"}})}]),angular.module("devicesensoralerts").config(["$stateProvider",function($stateProvider){$stateProvider.state("listDevicesensoralerts",{url:"/devicesensoralerts",templateUrl:"modules/devicesensoralerts/views/list-devicesensoralerts.client.view.html"}).state("createDevicesensoralert",{url:"/devicesensoralerts/create",templateUrl:"modules/devicesensoralerts/views/create-devicesensoralert.client.view.html"}).state("viewDevicesensoralert",{url:"/devicesensoralerts/:devicesensoralertId",templateUrl:"modules/devicesensoralerts/views/view-devicesensoralert.client.view.html"}).state("editDevicesensoralert",{url:"/devicesensoralerts/:devicesensoralertId/edit",templateUrl:"modules/devicesensoralerts/views/edit-devicesensoralert.client.view.html"})}]),angular.module("devicesensoralerts").controller("DevicesensoralertsController",["$scope","$stateParams","$location","Authentication","Devicesensoralerts",function($scope,$stateParams,$location,Authentication,Devicesensoralerts){$scope.authentication=Authentication,$scope.create=function(){var devicesensoralert=new Devicesensoralerts({name:this.name});devicesensoralert.$save(function(response){$location.path("devicesensoralerts/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(devicesensoralert){if(devicesensoralert){devicesensoralert.$remove();for(var i in $scope.devicesensoralerts)$scope.devicesensoralerts[i]===devicesensoralert&&$scope.devicesensoralerts.splice(i,1)}else $scope.devicesensoralert.$remove(function(){$location.path("devicesensoralerts")})},$scope.update=function(){var devicesensoralert=$scope.devicesensoralert;devicesensoralert.$update(function(){$location.path("devicesensoralerts/"+devicesensoralert._id)},function(errorResponse){$scope.error=errorResponse.data.message})},this.updateAlert=function(alert){var devicesensoralert=alert;devicesensoralert.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.devicesensoralerts=Devicesensoralerts.query()},$scope.findOne=function(){$scope.devicesensoralert=Devicesensoralerts.get({devicesensoralertId:$stateParams.devicesensoralertId})}}]),angular.module("devicesensoralerts").factory("Devicesensoralerts",["$resource",function($resource){return $resource("devicesensoralerts/:devicesensoralertId",{devicesensoralertId:"@_id"},{update:{method:"PUT"}})}]),angular.module("devicesensors").config(["$stateProvider",function($stateProvider){$stateProvider.state("listDevicesensors",{url:"/devicesensors",templateUrl:"modules/devicesensors/views/list-devicesensors.client.view.html"}).state("createDevicesensor",{url:"/devicesensors/create",templateUrl:"modules/devicesensors/views/create-devicesensor.client.view.html"}).state("viewDevicesensor",{url:"/devicesensors/:devicesensorId",templateUrl:"modules/devicesensors/views/view-devicesensor.client.view.html"}).state("editDevicesensor",{url:"/devicesensors/:devicesensorId/edit",templateUrl:"modules/devicesensors/views/edit-devicesensor.client.view.html"})}]),angular.module("devicesensors").controller("DevicesensorsController",["$scope","$stateParams","$location","Authentication","Devicesensors","$mdToast",function($scope,$stateParams,$location,Authentication,Devicesensors,$mdToast){$scope.authentication=Authentication,$scope.create=function(){var devicesensor=new Devicesensors({name:this.name});devicesensor.$save(function(response){$location.path("devicesensors/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(devicesensor){if(devicesensor){devicesensor.$remove();for(var i in $scope.devicesensors)$scope.devicesensors[i]===devicesensor&&$scope.devicesensors.splice(i,1)}else $scope.devicesensor.$remove(function(){$location.path("devicesensors")})},$scope.update=function(){var devicesensor=$scope.devicesensor;devicesensor.$update(function(){$location.path("devicesensors/"+devicesensor._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.devicesensors=Devicesensors.query()},$scope.findOne=function(){$scope.devicesensor=Devicesensors.get({devicesensorId:$stateParams.devicesensorId})}}]),angular.module("devicesensors").factory("Devicesensors",["$resource",function($resource){return $resource("devicesensors/:devicesensorId",{devicesensorId:"@_id"},{update:{method:"PUT"}})}]),angular.module("notifications").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Notifications","notifications","dropdown","/notifications(/create)?"),Menus.addSubMenuItem("topbar","notifications","List Notifications","notifications"),Menus.addSubMenuItem("topbar","notifications","New Notification","notifications/create")}]),angular.module("notifications").config(["$stateProvider",function($stateProvider){$stateProvider.state("listNotifications",{url:"/notifications",templateUrl:"modules/notifications/views/list-notifications.client.view.html"}).state("createNotification",{url:"/notifications/create",templateUrl:"modules/notifications/views/create-notification.client.view.html"}).state("viewNotification",{url:"/notifications/:notificationId",templateUrl:"modules/notifications/views/view-notification.client.view.html"}).state("editNotification",{url:"/notifications/:notificationId/edit",templateUrl:"modules/notifications/views/edit-notification.client.view.html"})}]),angular.module("notifications").controller("NotificationsController",["$scope","$stateParams","$location","Authentication","Notifications",function($scope,$stateParams,$location,Authentication,Notifications){$scope.authentication=Authentication,$scope.create=function(){var notification=new Notifications({name:this.name});notification.$save(function(response){$location.path("notifications/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(notification){if(notification){notification.$remove();for(var i in $scope.notifications)$scope.notifications[i]===notification&&$scope.notifications.splice(i,1)}else $scope.notification.$remove(function(){$location.path("notifications")})},$scope.update=function(){var notification=$scope.notification;notification.$update(function(){$location.path("notifications/"+notification._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.notifications=Notifications.query()},$scope.findOne=function(){$scope.notification=Notifications.get({notificationId:$stateParams.notificationId})}}]),angular.module("notifications").factory("Notifications",["$resource",function($resource){return $resource("notifications/:notificationId",{notificationId:"@_id"},{update:{method:"PUT"}})}]),angular.module("readings").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Readings","readings","dropdown","/readings(/create)?"),Menus.addSubMenuItem("topbar","readings","List Readings","readings"),Menus.addSubMenuItem("topbar","readings","New Reading","readings/create")}]),angular.module("readings").config(["$stateProvider",function($stateProvider){$stateProvider.state("listReadings",{url:"/readings",templateUrl:"modules/readings/views/list-readings.client.view.html"}).state("createReading",{url:"/readings/create",templateUrl:"modules/readings/views/create-reading.client.view.html"}).state("viewReading",{url:"/readings/:readingId",templateUrl:"modules/readings/views/view-reading.client.view.html"}).state("editReading",{url:"/readings/:readingId/edit",templateUrl:"modules/readings/views/edit-reading.client.view.html"})}]),angular.module("readings").controller("ReadingsController",["$scope","$stateParams","$location","Authentication","Readings",function($scope,$stateParams,$location,Authentication,Readings){$scope.authentication=Authentication,$scope.create=function(){var reading=new Readings({name:this.name});reading.$save(function(response){$location.path("readings/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(reading){if(reading){reading.$remove();for(var i in $scope.readings)$scope.readings[i]===reading&&$scope.readings.splice(i,1)}else $scope.reading.$remove(function(){$location.path("readings")})},$scope.update=function(){var reading=$scope.reading;reading.$update(function(){$location.path("readings/"+reading._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.readings=Readings.query()},$scope.findOne=function(){$scope.reading=Readings.get({readingId:$stateParams.readingId})}}]),angular.module("readings").factory("Readings",["$resource",function($resource){return $resource("readings/:readingId",{readingId:"@_id"},{update:{method:"PUT"}})}]),angular.module("readings").factory("Readings2",["$resource",function($resource){return $resource("readingsbydevice/:myId",{myId:"@_id"},{update:{method:"PUT"}})}]),angular.module("sensortypes").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Sensortypes","sensortypes","dropdown","/sensortypes(/create)?"),Menus.addSubMenuItem("topbar","sensortypes","List Sensortypes","sensortypes"),Menus.addSubMenuItem("topbar","sensortypes","New Sensortype","sensortypes/create")}]),angular.module("sensortypes").config(["$stateProvider",function($stateProvider){$stateProvider.state("listSensortypes",{url:"/sensortypes",templateUrl:"modules/sensortypes/views/list-sensortypes.client.view.html"}).state("createSensortype",{url:"/sensortypes/create",templateUrl:"modules/sensortypes/views/create-sensortype.client.view.html"}).state("viewSensortype",{url:"/sensortypes/:sensortypeId",templateUrl:"modules/sensortypes/views/view-sensortype.client.view.html"}).state("editSensortype",{url:"/sensortypes/:sensortypeId/edit",templateUrl:"modules/sensortypes/views/edit-sensortype.client.view.html"})}]),angular.module("sensortypes").controller("SensortypesController",["$scope","$stateParams","$location","Authentication","Sensortypes",function($scope,$stateParams,$location,Authentication,Sensortypes){$scope.authentication=Authentication,$scope.create=function(){var sensortype=new Sensortypes({name:this.name});sensortype.$save(function(response){$location.path("sensortypes/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(sensortype){if(sensortype){sensortype.$remove();for(var i in $scope.sensortypes)$scope.sensortypes[i]===sensortype&&$scope.sensortypes.splice(i,1)}else $scope.sensortype.$remove(function(){$location.path("sensortypes")})},$scope.update=function(){var sensortype=$scope.sensortype;sensortype.$update(function(){$location.path("sensortypes/"+sensortype._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.sensortypes=Sensortypes.query()},$scope.findOne=function(){$scope.sensortype=Sensortypes.get({sensortypeId:$stateParams.sensortypeId})}}]),angular.module("sensortypes").factory("Sensortypes",["$resource",function($resource){return $resource("sensortypes/:sensortypeId",{sensortypeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("softwareproductkeys").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Softwareproductkeys","softwareproductkeys","dropdown","/softwareproductkeys(/create)?"),Menus.addSubMenuItem("topbar","softwareproductkeys","List Softwareproductkeys","softwareproductkeys"),Menus.addSubMenuItem("topbar","softwareproductkeys","New Softwareproductkey","softwareproductkeys/create")}]),angular.module("softwareproductkeys").config(["$stateProvider",function($stateProvider){$stateProvider.state("listSoftwareproductkeys",{url:"/softwareproductkeys",templateUrl:"modules/softwareproductkeys/views/list-softwareproductkeys.client.view.html"}).state("createSoftwareproductkey",{url:"/softwareproductkeys/create",templateUrl:"modules/softwareproductkeys/views/create-softwareproductkey.client.view.html"}).state("viewSoftwareproductkey",{url:"/softwareproductkeys/:softwareproductkeyId",templateUrl:"modules/softwareproductkeys/views/view-softwareproductkey.client.view.html"}).state("editSoftwareproductkey",{url:"/softwareproductkeys/:softwareproductkeyId/edit",templateUrl:"modules/softwareproductkeys/views/edit-softwareproductkey.client.view.html"})}]),angular.module("softwareproductkeys").controller("SoftwareproductkeysController",["$scope","$stateParams","$location","Authentication","Softwareproductkeys",function($scope,$stateParams,$location,Authentication,Softwareproductkeys){$scope.authentication=Authentication,$scope.create=function(){var softwareproductkey=new Softwareproductkeys({name:this.name});softwareproductkey.$save(function(response){$location.path("softwareproductkeys/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(softwareproductkey){if(softwareproductkey){softwareproductkey.$remove();for(var i in $scope.softwareproductkeys)$scope.softwareproductkeys[i]===softwareproductkey&&$scope.softwareproductkeys.splice(i,1)}else $scope.softwareproductkey.$remove(function(){$location.path("softwareproductkeys")})},$scope.update=function(){var softwareproductkey=$scope.softwareproductkey;softwareproductkey.$update(function(){$location.path("softwareproductkeys/"+softwareproductkey._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.softwareproductkeys=Softwareproductkeys.query()},$scope.findOne=function(){$scope.softwareproductkey=Softwareproductkeys.get({softwareproductkeyId:$stateParams.softwareproductkeyId})}}]),angular.module("softwareproductkeys").factory("Softwareproductkeys",["$resource",function($resource){return $resource("softwareproductkeys/:softwareproductkeyId",{softwareproductkeyId:"@_id"},{update:{method:"PUT"}})}]),angular.module("softwareproducts").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Softwareproducts","softwareproducts","dropdown","/softwareproducts(/create)?"),Menus.addSubMenuItem("topbar","softwareproducts","List Softwareproducts","softwareproducts"),Menus.addSubMenuItem("topbar","softwareproducts","New Softwareproduct","softwareproducts/create")}]),angular.module("softwareproducts").config(["$stateProvider",function($stateProvider){$stateProvider.state("listSoftwareproducts",{url:"/softwareproducts",templateUrl:"modules/softwareproducts/views/list-softwareproducts.client.view.html"}).state("createSoftwareproduct",{url:"/softwareproducts/create",templateUrl:"modules/softwareproducts/views/create-softwareproduct.client.view.html"}).state("viewSoftwareproduct",{url:"/softwareproducts/:softwareproductId",templateUrl:"modules/softwareproducts/views/view-softwareproduct.client.view.html"}).state("editSoftwareproduct",{url:"/softwareproducts/:softwareproductId/edit",templateUrl:"modules/softwareproducts/views/edit-softwareproduct.client.view.html"})}]),angular.module("softwareproducts").controller("SoftwareproductsController",["$scope","$stateParams","$location","Authentication","Softwareproducts",function($scope,$stateParams,$location,Authentication,Softwareproducts){$scope.authentication=Authentication,$scope.create=function(){var softwareproduct=new Softwareproducts({name:this.name,description:this.description});softwareproduct.$save(function(response){$location.path("softwareproducts/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(softwareproduct){if(softwareproduct){softwareproduct.$remove();for(var i in $scope.softwareproducts)$scope.softwareproducts[i]===softwareproduct&&$scope.softwareproducts.splice(i,1)}else $scope.softwareproduct.$remove(function(){$location.path("softwareproducts")})},$scope.update=function(){var softwareproduct=$scope.softwareproduct;softwareproduct.$update(function(){$location.path("softwareproducts/"+softwareproduct._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.softwareproducts=Softwareproducts.query()},$scope.findOne=function(){$scope.softwareproduct=Softwareproducts.get({softwareproductId:$stateParams.softwareproductId})}}]),angular.module("softwareproducts").factory("Softwareproducts",["$resource",function($resource){return $resource("softwareproducts/:softwareproductId",{softwareproductId:"@_id"},{update:{method:"PUT"}})}]),angular.module("softwareproductversions").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Softwareproductversions","softwareproductversions","dropdown","/softwareproductversions(/create)?"),Menus.addSubMenuItem("topbar","softwareproductversions","List Softwareproductversions","softwareproductversions"),Menus.addSubMenuItem("topbar","softwareproductversions","New Softwareproductversion","softwareproductversions/create")}]),angular.module("softwareproductversions").config(["$stateProvider",function($stateProvider){
$stateProvider.state("listSoftwareproductversions",{url:"/softwareproductversions",templateUrl:"modules/softwareproductversions/views/list-softwareproductversions.client.view.html"}).state("createSoftwareproductversion",{url:"/softwareproductversions/create",templateUrl:"modules/softwareproductversions/views/create-softwareproductversion.client.view.html"}).state("viewSoftwareproductversion",{url:"/softwareproductversions/:softwareproductversionId",templateUrl:"modules/softwareproductversions/views/view-softwareproductversion.client.view.html"}).state("editSoftwareproductversion",{url:"/softwareproductversions/:softwareproductversionId/edit",templateUrl:"modules/softwareproductversions/views/edit-softwareproductversion.client.view.html"})}]),angular.module("softwareproductversions").controller("SoftwareproductversionsController",["$scope","$stateParams","$location","Authentication","Softwareproductversions",function($scope,$stateParams,$location,Authentication,Softwareproductversions){$scope.authentication=Authentication,$scope.create=function(){var softwareproductversion=new Softwareproductversions({name:this.name});softwareproductversion.$save(function(response){$location.path("softwareproductversions/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(softwareproductversion){if(softwareproductversion){softwareproductversion.$remove();for(var i in $scope.softwareproductversions)$scope.softwareproductversions[i]===softwareproductversion&&$scope.softwareproductversions.splice(i,1)}else $scope.softwareproductversion.$remove(function(){$location.path("softwareproductversions")})},$scope.update=function(){var softwareproductversion=$scope.softwareproductversion;softwareproductversion.$update(function(){$location.path("softwareproductversions/"+softwareproductversion._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.softwareproductversions=Softwareproductversions.query()},$scope.findOne=function(){$scope.softwareproductversion=Softwareproductversions.get({softwareproductversionId:$stateParams.softwareproductversionId})}}]),angular.module("softwareproductversions").factory("Softwareproductversions",["$resource",function($resource){return $resource("softwareproductversions/:softwareproductversionId",{softwareproductversionId:"@_id"},{update:{method:"PUT"}})}]),angular.module("systemadministration").config(["$stateProvider",function($stateProvider){$stateProvider.state("systemadministration",{url:"/systemadministration",templateUrl:"modules/systemadministration/views/systemadministration.client.view.html"})}]),angular.module("systemadministration").controller("SystemadministrationController",["$scope",function($scope){}]),angular.module("useradministration").config(["$stateProvider",function($stateProvider){$stateProvider.state("useradministration",{url:"/useradministration",templateUrl:"modules/useradministration/views/useradministration.client.view.html"})}]),angular.module("useradministration").controller("UseradministrationController",["$scope",function($scope){}]),angular.module("userroles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listUserroles",{url:"/userroles",templateUrl:"modules/userroles/views/list-userroles.client.view.html"}).state("createUserrole",{url:"/userroles/create",templateUrl:"modules/userroles/views/create-userrole.client.view.html"}).state("viewUserrole",{url:"/userroles/:userroleId",templateUrl:"modules/userroles/views/view-userrole.client.view.html"}).state("editUserrole",{url:"/userroles/:userroleId/edit",templateUrl:"modules/userroles/views/edit-userrole.client.view.html"})}]),angular.module("userroles").controller("UserrolesController",["$scope","$stateParams","$location","Authentication","Userroles",function($scope,$stateParams,$location,Authentication,Userroles){$scope.authentication=Authentication,$scope.create=function(){var userrole=new Userroles({name:this.name});userrole.$save(function(response){$location.path("userroles/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(userrole){if(userrole){userrole.$remove();for(var i in $scope.userroles)$scope.userroles[i]===userrole&&$scope.userroles.splice(i,1)}else $scope.userrole.$remove(function(){$location.path("userroles")})},$scope.update=function(){var userrole=$scope.userrole;userrole.$update(function(){$location.path("userroles/"+userrole._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.userroles=Userroles.query()},$scope.findOne=function(){$scope.userrole=Userroles.get({userroleId:$stateParams.userroleId})}}]),angular.module("userroles").factory("Userroles",["$resource",function($resource){return $resource("userroles/:userroleId",{userroleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"}).state("listUsers",{url:"/users",templateUrl:"modules/users/views/manage/list-users.client.view.html",data:{displayName:"Users"}})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("ManageUsersController",["$scope","$http","$location","Users","$modal","Devicesensoralerts","Devicesensors",function($scope,$http,$location,Users,$modal,Devicesensoralerts,Devicesensors){$scope.animationsEnabled=!0,$scope.openCreate=function(){$modal.open({animation:$scope.animationsEnabled,templateUrl:"modules/users/views/manage/create-user.client.view.html",controller:["$modalInstance","$scope","user",function($modalInstance,$scope,user){$scope.ok=function(){$modalInstance.close(user)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],windowClass:"app-modal-window",size:"lg",resolve:{user:function(){return""}}})},$scope.createUser=function(){},$scope.find=function(){$scope.users=Users.query()}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]),angular.module("users").factory("ClientsUsers",["$resource",function($resource){return $resource("clientsusers/:clientId1",{clientId1:"@_id"},{update:{method:"PUT"}})}]),angular.module("vendors").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Vendors","vendors","dropdown","/vendors(/create)?"),Menus.addSubMenuItem("topbar","vendors","List Vendors","vendors"),Menus.addSubMenuItem("topbar","vendors","New Vendor","vendors/create")}]),angular.module("vendors").config(["$stateProvider",function($stateProvider){$stateProvider.state("listVendors",{url:"/vendors",templateUrl:"modules/vendors/views/list-vendors.client.view.html"}).state("createVendor",{url:"/vendors/create",templateUrl:"modules/vendors/views/create-vendor.client.view.html"}).state("viewVendor",{url:"/vendors/:vendorId",templateUrl:"modules/vendors/views/view-vendor.client.view.html"}).state("editVendor",{url:"/vendors/:vendorId/edit",templateUrl:"modules/vendors/views/edit-vendor.client.view.html"})}]),angular.module("vendors").controller("VendorsController",["$scope","$stateParams","$location","Authentication","Vendors",function($scope,$stateParams,$location,Authentication,Vendors){$scope.authentication=Authentication,$scope.vendorsClients="",$scope.create=function(){var vendor=new Vendors({name:this.name});vendor.$save(function(response){$location.path("vendors/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(vendor){if(vendor){vendor.$remove();for(var i in $scope.vendors)$scope.vendors[i]===vendor&&$scope.vendors.splice(i,1)}else $scope.vendor.$remove(function(){$location.path("vendors")})},$scope.update=function(){var vendor=$scope.vendor;vendor.$update(function(){$location.path("vendors/"+vendor._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.vendors=Vendors.query()},$scope.findOne=function(){$scope.vendor=Vendors.get({vendorId:$stateParams.vendorId})}}]),angular.module("vendors").factory("Vendors",["$resource",function($resource){return $resource("vendors/:vendorId",{vendorId:"@_id"},{update:{method:"PUT"}})}]);